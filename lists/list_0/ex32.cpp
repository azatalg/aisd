#include <iostream>
#include <algorithm>
using namespace std;

// Struktura wierzchoÅ‚ka naszego mrocznego drzewa
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Funkcja pomocnicza, ktÃ³ra oblicza wysokoÅ›Ä‡ drzewa
// oraz aktualizuje "Å›rednicÄ™ cierpienia" (maksymalnÄ… odlegÅ‚oÅ›Ä‡)
int diameterHelper(Node* root, int &diameter) {
    if (!root) return 0;
    int leftHeight = diameterHelper(root->left, diameter);
    int rightHeight = diameterHelper(root->right, diameter);
    
    // Aktualizujemy Å›rednicÄ™ â€“ suma wysokoÅ›ci lewego i prawego poddrzewa
    diameter = max(diameter, leftHeight + rightHeight);
    
    // Zwracamy wysokoÅ›Ä‡ tego fragmentu mrocznego Å›wiata
    return 1 + max(leftHeight, rightHeight);
}
 
// Funkcja obliczajÄ…ca maksymalnÄ… odlegÅ‚oÅ›Ä‡ miÄ™dzy wierzchoÅ‚kami
int diameter(Node* root) {
    int dia = 0;
    diameterHelper(root, dia);
    return dia;
}
 
int main() {
    // Budujemy drzewo naszego wewnÄ™trznego rozdarcia:
    //          1
    //         / \
    //        2   3
    //       / \   \
    //      4   5   6
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->right = new Node(6);
    
    int maxDistance = diameter(root);
    cout << "Maksymalna odlegÅ‚oÅ›Ä‡ miÄ™dzy wierzchoÅ‚kami: " << maxDistance << endl;
    // Jak echo naszych rozdartych dusz, niech to przypomina o cierpieniu... ðŸ–¤ðŸ’€
    return 0;
}

